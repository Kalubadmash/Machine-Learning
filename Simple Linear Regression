import numpy as np
import matplotlib.pyplot as mtp
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Load the Salary Dataset
dataset = pd.read_csv('Salary_dataset.csv')

# Assuming the dataset has two columns: 'YearsExperience' and 'Salary'
x = dataset['YearsExperience'].values.reshape(-1, 1)  # Feature: Years of Experience
y = dataset['Salary'].values  # Target: Salary

# Split the dataset into training and testing sets
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=1/3, random_state=0)

# Initialize and train the Linear Regression model
regressor = LinearRegression()
regressor.fit(x_train, y_train)

# Make predictions
y_pred = regressor.predict(x_test)
x_pred = regressor.predict(x_train)

# Plot training data and regression line
mtp.scatter(x_train, y_train, color="green")
mtp.plot(x_train, x_pred, color="red")
mtp.title("Linear Regression on Salary Dataset (Training Data)")
mtp.xlabel("Years of Experience")
mtp.ylabel("Salary")
mtp.show()

# Plot testing data and regression line
mtp.scatter(x_test, y_test, color="blue")
mtp.plot(x_train, x_pred, color="red")
mtp.title("Linear Regression on Salary Dataset (Testing Data)")
mtp.xlabel("Years of Experience")
mtp.ylabel("Salary")
mtp.show()

# Print model coefficients and intercept
print('Coefficients:', regressor.coef_)
print('Intercept:', regressor.intercept_)

# Evaluate the model
print('Mean Squared Error:', mean_squared_error(y_test, y_pred))
print('Coefficient of Determination (R^2 Score):', r2_score(y_test, y_pred))
